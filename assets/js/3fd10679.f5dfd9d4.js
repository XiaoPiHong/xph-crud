"use strict";(self.webpackChunkexample=self.webpackChunkexample||[]).push([[455],{3166:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>s});var o=a(9214),l=a(2515);const t={},r="XphForm \u53ef\u914d\u7f6e\u8868\u5355",i={id:"comp/form",title:"XphForm \u53ef\u914d\u7f6e\u8868\u5355",description:"\u57fa\u672c\u4f7f\u7528",source:"@site/docs/comp/form.mdx",sourceDirName:"comp",slug:"/comp/form",permalink:"/xph-crud/docs/comp/form",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"comp",next:{title:"XphTable \u53ef\u914d\u7f6e\u5217\u8868",permalink:"/xph-crud/docs/comp/table"}},p={},s=[{value:"\u57fa\u672c\u4f7f\u7528",id:"\u57fa\u672c\u4f7f\u7528",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,l.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"xphform-\u53ef\u914d\u7f6e\u8868\u5355",children:"XphForm \u53ef\u914d\u7f6e\u8868\u5355"}),"\n",(0,o.jsx)(e.h2,{id:"\u57fa\u672c\u4f7f\u7528",children:"\u57fa\u672c\u4f7f\u7528"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:'import React from "react";\nimport { InputNumber } from "antd";\nimport dayjs from "dayjs";\nimport {\n  XphForm,\n  useXphForm,\n  IXphFormProps,\n  IXphFormActionType,\n} from "xph-crud";\n\nconst ReactApp: React.FC = () => {\n  const props: IXphFormProps = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 },\n    items: [\n      {\n        name: "Input",\n        label: "Input",\n        component: "Input",\n        required: true,\n        colProps: { span: 8 },\n        initialValue: "Input",\n        componentProps: {\n          onChange: (e) => {\n            // console.log(e);\n          },\n        },\n      },\n      {\n        name: "render",\n        label: "render",\n        render: ({ model, disabled, name, methods, componentProps }) => (\n          <div>\n            <InputNumber\n              disabled={disabled}\n              value={model[name]}\n              onChange={(e) => methods.setFieldsValue({ [name]: e })}\n              {...componentProps}\n            />\n          </div>\n        ),\n        componentProps: {\n          placeholder: "render",\n        },\n        show: ({ model }) => {\n          return model.Input !== "Input";\n        },\n        ifShow: ({ model }) => {\n          return model.Input;\n        },\n        colProps: { span: 8 },\n        initialValue: 2,\n        rules: [\n          {\n            required: true,\n            message: "render\u5fc5\u586b",\n          },\n        ],\n      },\n      {\n        name: "InputNumber",\n        label: "InputNumber",\n        component: "InputNumber",\n        componentProps: {\n          onBlur: (e) => {\n            console.log(e);\n          },\n          onChange: (e) => {\n            console.log(e);\n          },\n        },\n        initialValue: 2,\n        colProps: { span: 8 },\n      },\n      {\n        name: "Select",\n        label: "Select",\n        component: "Select",\n        componentProps: {\n          allowClear: true,\n          placeholder: "Select",\n          options: [\n            { label: "\u6d4b\u8bd5", value: "1" },\n            { label: "\u6d4b\u8bd52", value: "2" },\n          ],\n          onChange: (e) => {\n            console.log(e);\n          },\n        },\n        initialValue: "1",\n        colProps: { span: 8 },\n      },\n      {\n        name: "Transfer",\n        label: "Transfer",\n        component: "Transfer",\n        valuePropName: "targetKeys",\n        initialValue: ["1"],\n        componentProps: {\n          dataSource: [\n            {\n              key: "1",\n              title: "\u6807\u98981",\n            },\n            {\n              key: "2",\n              title: "\u6807\u98982",\n            },\n          ],\n          render: (item) => item.title,\n        },\n        colProps: { span: 8 },\n        rules: [\n          {\n            required: true,\n            type: "array",\n            message: "Transfer\u5fc5\u586b",\n          },\n        ],\n      },\n      {\n        name: "TreeSelect",\n        label: "TreeSelect",\n        component: "TreeSelect",\n        componentProps: {\n          placeholder: "\u8bf7\u9009\u62e9TreeSelect",\n          treeData: [\n            {\n              value: "parent 1",\n              title: "parent 1",\n              children: [\n                {\n                  value: "parent 1-0",\n                  title: "parent 1-0",\n                  children: [\n                    {\n                      value: "leaf1",\n                      title: "leaf1",\n                    },\n                    {\n                      value: "leaf2",\n                      title: "leaf2",\n                    },\n                  ],\n                },\n                {\n                  value: "parent 1-1",\n                  title: "parent 1-1",\n                  children: [\n                    {\n                      value: "leaf3",\n                      title: <b style={{ color: "#08c" }}>leaf3</b>,\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n        initialValue: "leaf3",\n        colProps: { span: 8 },\n        rules: [\n          {\n            required: true,\n            message: "TreeSelect\u5fc5\u586b",\n          },\n        ],\n      },\n      {\n        name: "Switch",\n        label: "Switch",\n        component: "Switch",\n        componentProps: {},\n        initialValue: true,\n        valuePropName: "checked",\n        colProps: { span: 8 },\n      },\n      {\n        name: "Radio",\n        label: "Radio",\n        component: "Radio",\n        componentProps: {},\n        valuePropName: "checked",\n        initialValue: true,\n        colProps: { span: 8 },\n      },\n      {\n        name: "RadioGroup",\n        label: "RadioGroup",\n        component: "RadioGroup",\n        componentProps: {\n          options: [\n            { label: "A", value: "a" },\n            { label: "B", value: "b" },\n            { label: "C", value: "c" },\n            { label: "D", value: "d" },\n          ],\n        },\n        initialValue: "a",\n        colProps: { span: 8 },\n      },\n      {\n        name: "RadioButtonGroup",\n        label: "RadioButtonGroup",\n        component: "RadioGroup",\n        componentProps: {\n          optionType: "button",\n          buttonStyle: "solid",\n          options: [\n            { label: "A", value: "a", disabled: true },\n            { label: "B", value: "b", disabled: false },\n            { label: "C", value: "c", disabled: false },\n            { label: "D", value: "d", disabled: true },\n          ],\n        },\n        initialValue: "a",\n        colProps: { span: 8 },\n      },\n      {\n        name: "Checkbox",\n        label: "Checkbox",\n        component: "Checkbox",\n        componentProps: {},\n        valuePropName: "checked",\n        colProps: { span: 8 },\n        initialValue: true,\n      },\n      {\n        name: "CheckboxGroup",\n        label: "CheckboxGroup",\n        component: "CheckboxGroup",\n        componentProps: {\n          options: [\n            { label: "A", value: "a" },\n            { label: "B", value: "b" },\n            { label: "C", value: "c" },\n            { label: "D", value: "d" },\n          ],\n        },\n        initialValue: ["a"],\n        colProps: { span: 8 },\n      },\n      {\n        name: "Cascader",\n        label: "Cascader",\n        component: "Cascader",\n        componentProps: {\n          placeholder: "\u8bf7\u9009\u62e9Cascader",\n          options: [\n            {\n              value: "zhejiang",\n              label: "Zhejiang",\n              children: [\n                {\n                  value: "hangzhou",\n                  label: "Hangzhou",\n                  children: [\n                    {\n                      value: "xihu",\n                      label: "West Lake",\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n        initialValue: ["zhejiang", "hangzhou", "xihu"],\n        colProps: { span: 8 },\n      },\n      {\n        name: "TimePicker",\n        label: "TimePicker",\n        component: "TimePicker",\n        componentProps: {\n          format: "HH:mm",\n          valueFormat: "HH:mm",\n        },\n        initialValue: dayjs("12:08", "HH:mm"),\n        colProps: { span: 8 },\n        rules: [\n          {\n            validator: async (rule, value) => {\n              if (!value) {\n                return Promise.reject("TimePicker\u5fc5\u586b");\n              }\n              return Promise.resolve();\n            },\n          },\n        ],\n      },\n      {\n        name: "DatePicker",\n        label: "DatePicker",\n        component: "DatePicker",\n        componentProps: {\n          format: "YYYY-MM-DD",\n          valueFormat: "YYYY-MM-DD",\n        },\n        colProps: { span: 8 },\n        initialValue: dayjs("2021-08-08", "YYYY-MM-DD"),\n      },\n      {\n        name: "MonthPicker",\n        label: "MonthPicker",\n        component: "MonthPicker",\n        componentProps: {\n          valueFormat: "YYYY-MM",\n        },\n        colProps: { span: 8 },\n        initialValue: dayjs("2021-08", "YYYY-MM"),\n      },\n      {\n        name: "WeekPicker",\n        label: "WeekPicker",\n        component: "WeekPicker",\n        componentProps: {\n          valueFormat: "YYYY-MM-DD HH:mm:ss",\n        },\n        colProps: { span: 8 },\n        initialValue: dayjs("2021-08-01", "YYYY-MM-DD"), // 2021-08-01\u662f21\u5e74\u7b2c32\u5468\n      },\n      {\n        name: "RangePicker",\n        label: "RangePicker",\n        component: "RangePicker",\n        componentProps: {\n          format: "YYYY-MM-DD",\n          valueFormat: "YYYY-MM-DD",\n        },\n        colProps: { span: 8 },\n        initialValue: [\n          dayjs("2021-08-01 00:00:00", "YYYY-MM-DD HH:mm:ss"),\n          dayjs("2021-08-08 23:59:59", "YYYY-MM-DD HH:mm:ss"),\n        ],\n      },\n      {\n        name: "InputPassword",\n        label: "InputPassword",\n        component: "InputPassword",\n        componentProps: {},\n        colProps: { span: 8 },\n        initialValue: "123456",\n      },\n      {\n        name: "InputTextArea",\n        label: "InputTextArea",\n        component: "InputTextArea",\n        componentProps: {},\n        colProps: { span: 8 },\n        initialValue: "123456",\n      },\n      {\n        name: "AutoComplete",\n        label: "AutoComplete",\n        component: "AutoComplete",\n        componentProps: {\n          options: [\n            { value: "Burns Bay Road" },\n            { value: "Downing Street" },\n            { value: "Wall Street" },\n          ],\n        },\n        initialValue: "Burns Bay Road",\n        colProps: { span: 8 },\n      },\n      {\n        name: "ApiSelect",\n        label: "ApiSelect",\n        component: "ApiSelect",\n        componentProps: ({ model }) => {\n          return {\n            placeholder: "ApiSelect",\n            allowClear: true,\n            immediate: true,\n            params: { a: model.Select },\n            api: async (params) => {\n              console.log(params, "GET ApiSelect===========================");\n              return [\n                { label: "\u6d4b\u8bd5", value: "1" },\n                { label: "\u6d4b\u8bd52", value: "2" },\n              ];\n            },\n          };\n        },\n        initialValue: "1",\n        colProps: { span: 8 },\n      },\n      {\n        name: "ApiTreeSelect",\n        label: "ApiTreeSelect",\n        component: "ApiTreeSelect",\n        componentProps: ({ model }) => {\n          return {\n            placeholder: "\u8bf7\u9009\u62e9ApiTreeSelect",\n            params: { a: model.Select },\n            immediate: true,\n            api: async (params) => {\n              console.log(\n                params,\n                "GET ApiTreeSelect==========================="\n              );\n              return [\n                {\n                  value: "parent 1",\n                  title: "parent 1",\n                  children: [\n                    {\n                      value: "parent 1-0",\n                      title: "parent 1-0",\n                      children: [\n                        {\n                          value: "leaf1",\n                          title: "leaf1",\n                        },\n                        {\n                          value: "leaf2",\n                          title: "leaf2",\n                        },\n                      ],\n                    },\n                    {\n                      value: "parent 1-1",\n                      title: "parent 1-1",\n                      children: [\n                        {\n                          value: "leaf3",\n                          title: <b style={{ color: "#08c" }}>leaf3</b>,\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ];\n            },\n          };\n        },\n        initialValue: "leaf3",\n        colProps: { span: 8 },\n        rules: [\n          {\n            required: true,\n            message: "ApiTreeSelect\u5fc5\u586b",\n          },\n        ],\n      },\n      {\n        name: "ApiTransfer",\n        label: "ApiTransfer",\n        component: "ApiTransfer",\n        valuePropName: "targetKeys",\n        initialValue: ["1"],\n        componentProps: ({ model }) => {\n          return {\n            params: { a: model.Select },\n            api: async (params) => {\n              // console.log(params, "GET ApiTransfer===========================");\n              return [\n                {\n                  key: "1",\n                  title: "\u6807\u98981",\n                },\n                {\n                  key: "2",\n                  title: "\u6807\u98982",\n                },\n              ];\n            },\n            render: (item) => item.title,\n          };\n        },\n        colProps: { span: 8 },\n        rules: [\n          {\n            required: true,\n            type: "array",\n            message: "ApiTransfer\u5fc5\u586b",\n          },\n        ],\n      },\n      {\n        name: "ApiAutoComplete",\n        label: "ApiAutoComplete",\n        component: "ApiAutoComplete",\n        componentProps: ({ model }) => {\n          return {\n            params: { a: model.Select },\n            immediate: true,\n            api: async (params) => {\n              console.log(\n                params,\n                "GET ApiAutoComplete==========================="\n              );\n              return [\n                { value: "Burns Bay Road" },\n                { value: "Downing Street" },\n                { value: "Wall Street" },\n              ];\n            },\n          };\n        },\n        initialValue: "Burns Bay Road",\n        colProps: { span: 8 },\n      },\n      {\n        name: "Upload",\n        label: "Upload",\n        component: "Upload",\n        componentProps: {\n          children: "\u4e0a\u4f20",\n          showUploadList: {},\n          listType: "picture-card",\n          beforeUpload(file) {\n            return false;\n          },\n          onChange(info) {\n            const { file, fileList } = info;\n            const { status } = file;\n            switch (status) {\n              case "removed": {\n                setFieldsValue({\n                  Upload: fileList,\n                });\n                break;\n              }\n              default: {\n                // \u4e0a\u4f20\uff08\u6b64\u5904\u7531\u4e8e\u6ca1\u6709\u4e0a\u4f20\u670d\u52a1\u5668\uff0c\u9ed8\u8ba4\u662f\u5047\u4e0a\u4f20\uff0c\u9ed8\u8ba4\u90fd\u662f\u6210\u529f\uff09\n                setFieldsValue({\n                  Upload: [\n                    {\n                      uid: "-1",\n                      name: "image.png",\n                      status: "done",\n                      url: "https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png",\n                    },\n                  ],\n                });\n              }\n            }\n          },\n        },\n        colProps: { span: 8 },\n        valuePropName: "fileList",\n        initialValue: [],\n        rules: [\n          {\n            validator: async (rule, value) => {\n              console.log("validate=================", value);\n              if (value && value.length === 0) {\n                return Promise.reject("\u8bf7\u4e0a\u4f20\u6587\u4ef6");\n              }\n              return Promise.resolve();\n            },\n          },\n        ],\n      },\n      {\n        name: "AutoUpload",\n        label: "AutoUpload",\n        component: "AutoUpload",\n        componentProps: {\n          /**\n           * @description \u4e0a\u4f20\u670d\u52a1\u5668\u63a5\u53e3\uff0c\u9700\u8981\u8fd4\u56de\uff1a\n           * type IFileList = Array<{\n           *   uid: string;\n           *   url: string;\n           *   status: string;\n           *   name: string;\n           * }>\n           */\n          // api: async (params) => {\n          //   /** \u6b64\u5904\u53ea\u662f\u6a21\u62df\u4e0a\u4f20\u670d\u52a1\u5668\u7684\u64cd\u4f5c */\n          //   return [\n          //     {\n          //       uid: `${+new Date()}${Math.random()}`,\n          //       name: "image.png",\n          //       status: "done",\n          //       url: "https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png",\n          //     },\n          //   ];\n          // },\n          maxSize: 1, // \u6587\u4ef6\u6700\u5927\u9650\u5236\n          maxCount: 2, // \u6587\u4ef6\u6700\u5927\u6570\u91cf\n          /**\n           * @description \u8868\u5355\u83b7\u53d6\u5230\u7684\u7c7b\u578b\n           * @type "String"\uff08\u9ed8\u8ba4\uff0c\u914d\u5408api\u4f7f\u7528\uff09 | "String[]"\uff08\u914d\u5408api\u4f7f\u7528\uff09 | "File[]" | "FileList"\uff08\u914d\u5408api\u4f7f\u7528\uff09\n           * @description\n           * String\u65f6\u5982\u679c\u4e0a\u4f20\u591a\u6587\u4ef6\uff0c\u5219\u8fd4\u56de\u5b57\u7b26\u4e32,\u62fc\u63a5   initialValue\uff1a\u5b57\u7b26\u4e32\n           * String[]\u65f6\u5982\u679c\u4e0a\u4f20\u591a\u6587\u4ef6\uff0c\u5219\u8fd4\u56de\u6570\u7ec4        initialValue\uff1a\u6570\u7ec4\n           * File[]\u65f6\u5982\u679c\u4e0a\u4f20\u591a\u6587\u4ef6\uff0c\u5219\u8fd4\u56de\u6570\u7ec4          initialValue\uff1a\u6570\u7ec4\n           * FileList\u65f6\u5982\u679c\u4e0a\u4f20\u591a\u6587\u4ef6\uff0c\u5219\u8fd4\u56de\u6570\u7ec4        initialValue\uff1a\u6570\u7ec4\n           */\n          returnType: "File[]",\n          onChange(val) {\n            console.log("AutoUpload onChange========================", val);\n          },\n        },\n        colProps: { span: 8 },\n        initialValue: [],\n        rules: [\n          {\n            validator: async (rule, value) => {\n              console.log("validate=================", value);\n              if (!value.length) {\n                return Promise.reject("\u8bf7\u4e0a\u4f20\u6587\u4ef6");\n              }\n              return Promise.resolve();\n            },\n          },\n        ],\n      },\n      {\n        name: "Button",\n        label: "Button",\n        component: "Button",\n        componentProps: {\n          children: "Button",\n          onClick: async () => {\n            // console.log(reactFormRef.current?.getFieldsValue(true));\n            // console.log(reactFormRef.current?.setFieldsValue({ Input: "123" }));\n            // console.log(reactFormRef.current?.getFieldsValue(["Input"]));\n            // console.log(await reactFormRef.current?.resetFields());\n            // console.log(await reactFormRef.current?.validator());\n            console.log(getFieldsValue(true));\n            console.log(\n              setFieldsValue({\n                Input: "Input test",\n                render: 23,\n                InputNumber: 21,\n                ApiSelect: "2",\n                Select: null,\n                Transfer: [],\n                ApiTransfer: [],\n                ApiTreeSelect: null,\n                TreeSelect: null,\n                Switch: false,\n                Radio: false,\n                RadioGroup: "b",\n                RadioButtonGroup: "b",\n                Checkbox: false,\n                CheckboxGroup: ["a"],\n                Cascader: [],\n                TimePicker: "2021-08-01 03:59:59",\n                DatePicker: "2021-08-01",\n                MonthPicker: "2021-09",\n                WeekPicker: "2021-09-02 00:00:00",\n                RangePicker: ["2021-08-02", "2021-08-07"],\n                InputPassword: "12345678",\n                InputTextArea: "123456789",\n                AutoComplete: "Burns Bay Road Test",\n                ApiAutoComplete: "Burns Bay Road Test",\n                Upload: [],\n                AutoUpload: [],\n              })\n            );\n            // console.log(getFieldsValue(["RangePicker"]));\n            // console.log(await resetFields());\n            // console.log(await validator());\n          },\n        },\n        colProps: { span: 8 },\n      },\n      {\n        name: "ResetButton",\n        label: "ResetButton",\n        component: "Button",\n        componentProps: {\n          children: "ResetButton",\n          onClick: async () => {\n            console.log(await resetFields());\n          },\n        },\n        colProps: { span: 8 },\n      },\n      {\n        name: "ValidateButton",\n        label: "ValidateButton",\n        component: "Button",\n        componentProps: {\n          children: "ValidateButton",\n          onClick: async () => {\n            console.log(await validator());\n          },\n        },\n        colProps: { span: 8 },\n      },\n    ],\n  };\n\n  /**\n   * ==========================================\n   * \u4e00\u3001\n   *\n   * \u7b2c\u4e00\u79cd\u8c03\u7528form\u7ec4\u4ef6api\u7684\u65b9\u5f0f\uff0c\u901a\u8fc7useRef\n   *=============================================\n   *  */\n  const reactFormRef = React.useRef<IXphFormActionType>(null);\n\n  /**\n   * ==========================================\n   * \u4e8c\u3001\n   *\n   * \u7b2c\u4e8c\u79cd\u8c03\u7528form\u7ec4\u4ef6api\u7684\u65b9\u5f0f\uff0c\u901a\u8fc7\u5c01\u88c5\u7684useReactForm\u65b9\u6cd5\n   *=============================================\n   * */\n  const [register, { setFieldsValue, getFieldsValue, resetFields, validator }] =\n    useXphForm();\n  return (\n    <section>\n      <XphForm register={register} ref={reactFormRef} {...props}></XphForm>\n    </section>\n  );\n};\n\nexport default ReactApp;\n'})})]})}function u(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},2515:(n,e,a)=>{a.d(e,{R:()=>r,x:()=>i});var o=a(8318);const l={},t=o.createContext(l);function r(n){const e=o.useContext(t);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:r(n.components),o.createElement(t.Provider,{value:e},n.children)}}}]);